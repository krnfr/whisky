/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/category": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.category.id"];
          created_at?: parameters["rowFilter.category.created_at"];
          updated_at?: parameters["rowFilter.category.updated_at"];
          name?: parameters["rowFilter.category.name"];
          color?: parameters["rowFilter.category.color"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["category"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** category */
          category?: definitions["category"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.category.id"];
          created_at?: parameters["rowFilter.category.created_at"];
          updated_at?: parameters["rowFilter.category.updated_at"];
          name?: parameters["rowFilter.category.name"];
          color?: parameters["rowFilter.category.color"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.category.id"];
          created_at?: parameters["rowFilter.category.created_at"];
          updated_at?: parameters["rowFilter.category.updated_at"];
          name?: parameters["rowFilter.category.name"];
          color?: parameters["rowFilter.category.color"];
        };
        body: {
          /** category */
          category?: definitions["category"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/collection": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.collection.created_at"];
          updated_at?: parameters["rowFilter.collection.updated_at"];
          liquor?: parameters["rowFilter.collection.liquor"];
          purchase_price?: parameters["rowFilter.collection.purchase_price"];
          purchase_currency?: parameters["rowFilter.collection.purchase_currency"];
          purchase_location?: parameters["rowFilter.collection.purchase_location"];
          purchase_date?: parameters["rowFilter.collection.purchase_date"];
          id?: parameters["rowFilter.collection.id"];
          year?: parameters["rowFilter.collection.year"];
          public?: parameters["rowFilter.collection.public"];
          cover?: parameters["rowFilter.collection.cover"];
          package?: parameters["rowFilter.collection.package"];
          package_rating?: parameters["rowFilter.collection.package_rating"];
          condition?: parameters["rowFilter.collection.condition"];
          owner?: parameters["rowFilter.collection.owner"];
          open?: parameters["rowFilter.collection.open"];
          notes?: parameters["rowFilter.collection.notes"];
          version?: parameters["rowFilter.collection.version"];
          purchase_notes?: parameters["rowFilter.collection.purchase_notes"];
          storage?: parameters["rowFilter.collection.storage"];
          lot?: parameters["rowFilter.collection.lot"];
          sell?: parameters["rowFilter.collection.sell"];
          sold?: parameters["rowFilter.collection.sold"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["collection"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** collection */
          collection?: definitions["collection"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.collection.created_at"];
          updated_at?: parameters["rowFilter.collection.updated_at"];
          liquor?: parameters["rowFilter.collection.liquor"];
          purchase_price?: parameters["rowFilter.collection.purchase_price"];
          purchase_currency?: parameters["rowFilter.collection.purchase_currency"];
          purchase_location?: parameters["rowFilter.collection.purchase_location"];
          purchase_date?: parameters["rowFilter.collection.purchase_date"];
          id?: parameters["rowFilter.collection.id"];
          year?: parameters["rowFilter.collection.year"];
          public?: parameters["rowFilter.collection.public"];
          cover?: parameters["rowFilter.collection.cover"];
          package?: parameters["rowFilter.collection.package"];
          package_rating?: parameters["rowFilter.collection.package_rating"];
          condition?: parameters["rowFilter.collection.condition"];
          owner?: parameters["rowFilter.collection.owner"];
          open?: parameters["rowFilter.collection.open"];
          notes?: parameters["rowFilter.collection.notes"];
          version?: parameters["rowFilter.collection.version"];
          purchase_notes?: parameters["rowFilter.collection.purchase_notes"];
          storage?: parameters["rowFilter.collection.storage"];
          lot?: parameters["rowFilter.collection.lot"];
          sell?: parameters["rowFilter.collection.sell"];
          sold?: parameters["rowFilter.collection.sold"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.collection.created_at"];
          updated_at?: parameters["rowFilter.collection.updated_at"];
          liquor?: parameters["rowFilter.collection.liquor"];
          purchase_price?: parameters["rowFilter.collection.purchase_price"];
          purchase_currency?: parameters["rowFilter.collection.purchase_currency"];
          purchase_location?: parameters["rowFilter.collection.purchase_location"];
          purchase_date?: parameters["rowFilter.collection.purchase_date"];
          id?: parameters["rowFilter.collection.id"];
          year?: parameters["rowFilter.collection.year"];
          public?: parameters["rowFilter.collection.public"];
          cover?: parameters["rowFilter.collection.cover"];
          package?: parameters["rowFilter.collection.package"];
          package_rating?: parameters["rowFilter.collection.package_rating"];
          condition?: parameters["rowFilter.collection.condition"];
          owner?: parameters["rowFilter.collection.owner"];
          open?: parameters["rowFilter.collection.open"];
          notes?: parameters["rowFilter.collection.notes"];
          version?: parameters["rowFilter.collection.version"];
          purchase_notes?: parameters["rowFilter.collection.purchase_notes"];
          storage?: parameters["rowFilter.collection.storage"];
          lot?: parameters["rowFilter.collection.lot"];
          sell?: parameters["rowFilter.collection.sell"];
          sold?: parameters["rowFilter.collection.sold"];
        };
        body: {
          /** collection */
          collection?: definitions["collection"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/currency": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.currency.id"];
          created_at?: parameters["rowFilter.currency.created_at"];
          updated_at?: parameters["rowFilter.currency.updated_at"];
          symbol?: parameters["rowFilter.currency.symbol"];
          to_eur?: parameters["rowFilter.currency.to_eur"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["currency"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** currency */
          currency?: definitions["currency"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.currency.id"];
          created_at?: parameters["rowFilter.currency.created_at"];
          updated_at?: parameters["rowFilter.currency.updated_at"];
          symbol?: parameters["rowFilter.currency.symbol"];
          to_eur?: parameters["rowFilter.currency.to_eur"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.currency.id"];
          created_at?: parameters["rowFilter.currency.created_at"];
          updated_at?: parameters["rowFilter.currency.updated_at"];
          symbol?: parameters["rowFilter.currency.symbol"];
          to_eur?: parameters["rowFilter.currency.to_eur"];
        };
        body: {
          /** currency */
          currency?: definitions["currency"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/label": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.label.id"];
          created_at?: parameters["rowFilter.label.created_at"];
          updated_at?: parameters["rowFilter.label.updated_at"];
          name?: parameters["rowFilter.label.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["label"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** label */
          label?: definitions["label"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.label.id"];
          created_at?: parameters["rowFilter.label.created_at"];
          updated_at?: parameters["rowFilter.label.updated_at"];
          name?: parameters["rowFilter.label.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.label.id"];
          created_at?: parameters["rowFilter.label.created_at"];
          updated_at?: parameters["rowFilter.label.updated_at"];
          name?: parameters["rowFilter.label.name"];
        };
        body: {
          /** label */
          label?: definitions["label"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/liquor": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.liquor.id"];
          created_at?: parameters["rowFilter.liquor.created_at"];
          updated_at?: parameters["rowFilter.liquor.updated_at"];
          label?: parameters["rowFilter.liquor.label"];
          category?: parameters["rowFilter.liquor.category"];
          name?: parameters["rowFilter.liquor.name"];
          cover?: parameters["rowFilter.liquor.cover"];
          version?: parameters["rowFilter.liquor.version"];
          notes?: parameters["rowFilter.liquor.notes"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["liquor"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** liquor */
          liquor?: definitions["liquor"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.liquor.id"];
          created_at?: parameters["rowFilter.liquor.created_at"];
          updated_at?: parameters["rowFilter.liquor.updated_at"];
          label?: parameters["rowFilter.liquor.label"];
          category?: parameters["rowFilter.liquor.category"];
          name?: parameters["rowFilter.liquor.name"];
          cover?: parameters["rowFilter.liquor.cover"];
          version?: parameters["rowFilter.liquor.version"];
          notes?: parameters["rowFilter.liquor.notes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.liquor.id"];
          created_at?: parameters["rowFilter.liquor.created_at"];
          updated_at?: parameters["rowFilter.liquor.updated_at"];
          label?: parameters["rowFilter.liquor.label"];
          category?: parameters["rowFilter.liquor.category"];
          name?: parameters["rowFilter.liquor.name"];
          cover?: parameters["rowFilter.liquor.cover"];
          version?: parameters["rowFilter.liquor.version"];
          notes?: parameters["rowFilter.liquor.notes"];
        };
        body: {
          /** liquor */
          liquor?: definitions["liquor"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/owner": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.owner.id"];
          created_at?: parameters["rowFilter.owner.created_at"];
          updated_at?: parameters["rowFilter.owner.updated_at"];
          name?: parameters["rowFilter.owner.name"];
          user?: parameters["rowFilter.owner.user"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["owner"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** owner */
          owner?: definitions["owner"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.owner.id"];
          created_at?: parameters["rowFilter.owner.created_at"];
          updated_at?: parameters["rowFilter.owner.updated_at"];
          name?: parameters["rowFilter.owner.name"];
          user?: parameters["rowFilter.owner.user"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.owner.id"];
          created_at?: parameters["rowFilter.owner.created_at"];
          updated_at?: parameters["rowFilter.owner.updated_at"];
          name?: parameters["rowFilter.owner.name"];
          user?: parameters["rowFilter.owner.user"];
        };
        body: {
          /** owner */
          owner?: definitions["owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/package": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.package.id"];
          created_at?: parameters["rowFilter.package.created_at"];
          updated_at?: parameters["rowFilter.package.updated_at"];
          name?: parameters["rowFilter.package.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["package"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** package */
          package?: definitions["package"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.package.id"];
          created_at?: parameters["rowFilter.package.created_at"];
          updated_at?: parameters["rowFilter.package.updated_at"];
          name?: parameters["rowFilter.package.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.package.id"];
          created_at?: parameters["rowFilter.package.created_at"];
          updated_at?: parameters["rowFilter.package.updated_at"];
          name?: parameters["rowFilter.package.name"];
        };
        body: {
          /** package */
          package?: definitions["package"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/picture": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.picture.id"];
          created_at?: parameters["rowFilter.picture.created_at"];
          updated_at?: parameters["rowFilter.picture.updated_at"];
          collection?: parameters["rowFilter.picture.collection"];
          candid?: parameters["rowFilter.picture.candid"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["picture"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** picture */
          picture?: definitions["picture"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.picture.id"];
          created_at?: parameters["rowFilter.picture.created_at"];
          updated_at?: parameters["rowFilter.picture.updated_at"];
          collection?: parameters["rowFilter.picture.collection"];
          candid?: parameters["rowFilter.picture.candid"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.picture.id"];
          created_at?: parameters["rowFilter.picture.created_at"];
          updated_at?: parameters["rowFilter.picture.updated_at"];
          collection?: parameters["rowFilter.picture.collection"];
          candid?: parameters["rowFilter.picture.candid"];
        };
        body: {
          /** picture */
          picture?: definitions["picture"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/price": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.price.id"];
          created_at?: parameters["rowFilter.price.created_at"];
          liquor?: parameters["rowFilter.price.liquor"];
          price?: parameters["rowFilter.price.price"];
          notes?: parameters["rowFilter.price.notes"];
          link?: parameters["rowFilter.price.link"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["price"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** price */
          price?: definitions["price"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.price.id"];
          created_at?: parameters["rowFilter.price.created_at"];
          liquor?: parameters["rowFilter.price.liquor"];
          price?: parameters["rowFilter.price.price"];
          notes?: parameters["rowFilter.price.notes"];
          link?: parameters["rowFilter.price.link"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.price.id"];
          created_at?: parameters["rowFilter.price.created_at"];
          liquor?: parameters["rowFilter.price.liquor"];
          price?: parameters["rowFilter.price.price"];
          notes?: parameters["rowFilter.price.notes"];
          link?: parameters["rowFilter.price.link"];
        };
        body: {
          /** price */
          price?: definitions["price"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/storage": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.storage.id"];
          created_at?: parameters["rowFilter.storage.created_at"];
          updated_at?: parameters["rowFilter.storage.updated_at"];
          name?: parameters["rowFilter.storage.name"];
          owner?: parameters["rowFilter.storage.owner"];
          notes?: parameters["rowFilter.storage.notes"];
          location?: parameters["rowFilter.storage.location"];
          full_recorded?: parameters["rowFilter.storage.full_recorded"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["storage"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** storage */
          storage?: definitions["storage"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.storage.id"];
          created_at?: parameters["rowFilter.storage.created_at"];
          updated_at?: parameters["rowFilter.storage.updated_at"];
          name?: parameters["rowFilter.storage.name"];
          owner?: parameters["rowFilter.storage.owner"];
          notes?: parameters["rowFilter.storage.notes"];
          location?: parameters["rowFilter.storage.location"];
          full_recorded?: parameters["rowFilter.storage.full_recorded"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.storage.id"];
          created_at?: parameters["rowFilter.storage.created_at"];
          updated_at?: parameters["rowFilter.storage.updated_at"];
          name?: parameters["rowFilter.storage.name"];
          owner?: parameters["rowFilter.storage.owner"];
          notes?: parameters["rowFilter.storage.notes"];
          location?: parameters["rowFilter.storage.location"];
          full_recorded?: parameters["rowFilter.storage.full_recorded"];
        };
        body: {
          /** storage */
          storage?: definitions["storage"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  category: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    color?: string;
  };
  collection: {
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `liquor.id`.<fk table='liquor' column='id'/>
     */
    liquor: number;
    /** Format: bigint */
    purchase_price?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `currency.id`.<fk table='currency' column='id'/>
     */
    purchase_currency?: number;
    /** Format: text */
    purchase_location?: string;
    /** Format: date */
    purchase_date?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: bigint */
    year?: number;
    /** Format: boolean */
    public: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `picture.id`.<fk table='picture' column='id'/>
     */
    cover?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `package.id`.<fk table='package' column='id'/>
     */
    package?: number;
    /** Format: bigint */
    package_rating?: number;
    /** Format: bigint */
    condition?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `owner.id`.<fk table='owner' column='id'/>
     */
    owner?: string;
    /** Format: boolean */
    open?: boolean;
    /** Format: character varying */
    notes?: string;
    /** Format: text */
    version?: string;
    /** Format: character varying */
    purchase_notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `storage.id`.<fk table='storage' column='id'/>
     */
    storage?: string;
    /** Format: text */
    lot?: string;
    /** Format: boolean */
    sell?: boolean;
    /** Format: boolean */
    sold?: boolean;
  };
  currency: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: text */
    symbol: string;
    /** Format: real */
    to_eur?: number;
  };
  label: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: text */
    name?: string;
  };
  liquor: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `label.id`.<fk table='label' column='id'/>
     */
    label?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `category.id`.<fk table='category' column='id'/>
     */
    category?: number;
    /** Format: text */
    name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `picture.id`.<fk table='picture' column='id'/>
     */
    cover?: string;
    /** Format: text */
    version?: string;
    /** Format: character varying */
    notes?: string;
  };
  owner: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: text */
    name: string;
    /** Format: uuid */
    user?: string;
  };
  package: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: text */
    name: string;
  };
  picture: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `collection.id`.<fk table='collection' column='id'/>
     */
    collection?: string;
    /** Format: boolean */
    candid: boolean;
  };
  price: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `liquor.id`.<fk table='liquor' column='id'/>
     */
    liquor: number;
    /** Format: integer */
    price: number;
    /** Format: character varying */
    notes?: string;
    /** Format: text */
    link?: string;
  };
  storage: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `owner.id`.<fk table='owner' column='id'/>
     */
    owner?: string;
    /** Format: character varying */
    notes?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `storage.id`.<fk table='storage' column='id'/>
     */
    location?: string;
    /** Format: boolean */
    full_recorded?: boolean;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description category */
  "body.category": definitions["category"];
  /** Format: bigint */
  "rowFilter.category.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.category.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.category.updated_at": string;
  /** Format: text */
  "rowFilter.category.name": string;
  /** Format: text */
  "rowFilter.category.color": string;
  /** @description collection */
  "body.collection": definitions["collection"];
  /** Format: timestamp with time zone */
  "rowFilter.collection.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.collection.updated_at": string;
  /** Format: bigint */
  "rowFilter.collection.liquor": string;
  /** Format: bigint */
  "rowFilter.collection.purchase_price": string;
  /** Format: bigint */
  "rowFilter.collection.purchase_currency": string;
  /** Format: text */
  "rowFilter.collection.purchase_location": string;
  /** Format: date */
  "rowFilter.collection.purchase_date": string;
  /** Format: uuid */
  "rowFilter.collection.id": string;
  /** Format: bigint */
  "rowFilter.collection.year": string;
  /** Format: boolean */
  "rowFilter.collection.public": string;
  /** Format: uuid */
  "rowFilter.collection.cover": string;
  /** Format: bigint */
  "rowFilter.collection.package": string;
  /** Format: bigint */
  "rowFilter.collection.package_rating": string;
  /** Format: bigint */
  "rowFilter.collection.condition": string;
  /** Format: uuid */
  "rowFilter.collection.owner": string;
  /** Format: boolean */
  "rowFilter.collection.open": string;
  /** Format: character varying */
  "rowFilter.collection.notes": string;
  /** Format: text */
  "rowFilter.collection.version": string;
  /** Format: character varying */
  "rowFilter.collection.purchase_notes": string;
  /** Format: uuid */
  "rowFilter.collection.storage": string;
  /** Format: text */
  "rowFilter.collection.lot": string;
  /** Format: boolean */
  "rowFilter.collection.sell": string;
  /** Format: boolean */
  "rowFilter.collection.sold": string;
  /** @description currency */
  "body.currency": definitions["currency"];
  /** Format: bigint */
  "rowFilter.currency.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.currency.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.currency.updated_at": string;
  /** Format: text */
  "rowFilter.currency.symbol": string;
  /** Format: real */
  "rowFilter.currency.to_eur": string;
  /** @description label */
  "body.label": definitions["label"];
  /** Format: bigint */
  "rowFilter.label.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.label.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.label.updated_at": string;
  /** Format: text */
  "rowFilter.label.name": string;
  /** @description liquor */
  "body.liquor": definitions["liquor"];
  /** Format: bigint */
  "rowFilter.liquor.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.liquor.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.liquor.updated_at": string;
  /** Format: bigint */
  "rowFilter.liquor.label": string;
  /** Format: bigint */
  "rowFilter.liquor.category": string;
  /** Format: text */
  "rowFilter.liquor.name": string;
  /** Format: uuid */
  "rowFilter.liquor.cover": string;
  /** Format: text */
  "rowFilter.liquor.version": string;
  /** Format: character varying */
  "rowFilter.liquor.notes": string;
  /** @description owner */
  "body.owner": definitions["owner"];
  /** Format: uuid */
  "rowFilter.owner.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.owner.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.owner.updated_at": string;
  /** Format: text */
  "rowFilter.owner.name": string;
  /** Format: uuid */
  "rowFilter.owner.user": string;
  /** @description package */
  "body.package": definitions["package"];
  /** Format: bigint */
  "rowFilter.package.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.package.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.package.updated_at": string;
  /** Format: text */
  "rowFilter.package.name": string;
  /** @description picture */
  "body.picture": definitions["picture"];
  /** Format: uuid */
  "rowFilter.picture.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.picture.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.picture.updated_at": string;
  /** Format: uuid */
  "rowFilter.picture.collection": string;
  /** Format: boolean */
  "rowFilter.picture.candid": string;
  /** @description price */
  "body.price": definitions["price"];
  /** Format: bigint */
  "rowFilter.price.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.price.created_at": string;
  /** Format: bigint */
  "rowFilter.price.liquor": string;
  /** Format: integer */
  "rowFilter.price.price": string;
  /** Format: character varying */
  "rowFilter.price.notes": string;
  /** Format: text */
  "rowFilter.price.link": string;
  /** @description storage */
  "body.storage": definitions["storage"];
  /** Format: uuid */
  "rowFilter.storage.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.storage.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.storage.updated_at": string;
  /** Format: text */
  "rowFilter.storage.name": string;
  /** Format: uuid */
  "rowFilter.storage.owner": string;
  /** Format: character varying */
  "rowFilter.storage.notes": string;
  /** Format: uuid */
  "rowFilter.storage.location": string;
  /** Format: boolean */
  "rowFilter.storage.full_recorded": string;
}

export interface operations {}

export interface external {}
